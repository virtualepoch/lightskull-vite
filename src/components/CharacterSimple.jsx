/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 public/models/simple_character.glb -o src/components/CharacterSimple.jsx 
Author: Redfox (https://sketchfab.com/CyberEmeka)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/character-f7a1b4c4f57b4f68ae172ed24495473c
Title: Character
*/

import { useGLTF, useAnimations } from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
import { useEffect, useMemo, useRef } from "react";
import { Color, LoopOnce, MeshStandardMaterial } from "three";
import { SkeletonUtils } from "three-stdlib";

export function CharacterSimple({
  color = "black",
  animation = "Idle",
  ...props
}) {
  const group = useRef();

  const { scene, materials, animations } = useGLTF(
    "/models/simple_character.glb"
  );

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    actions[animation].reset().fadeIn(0.2).play();
    return () => actions[animation]?.fadeOut(0.2);
  }, [animation]);

  const playerColorMaterial = useMemo(
    () => new MeshStandardMaterial({ color: new Color(color) }),
    [color]
  );

  useEffect(() => {
    // ASSIGNING CHARACTER COLOR
    nodes.Cube.traverse((child) => {
      if (child.isMesh && child.material.name === "Material") {
        child.material = playerColorMaterial;
      }
      if (child.isMesh) {
        child.castShadow = true;
        child.receiveShadow = true;
      }
    });

    clone.traverse((child) => {
      if (child.isMesh && child.material.name === "Material") {
        child.material = playerColorMaterial;
      }
      if (child.isMesh) {
        child.castShadow = true;
      }
    });
  }, [nodes, clone]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group
          name="Sketchfab_model"
          rotation={[-Math.PI / 2, 0, 0]}
          scale={1.662}
        >
          <group name="Root">
            <group name="Armature">
              <primitive object={nodes.Armature_rootJoint} />
              <group name="Cube" position={[0, 0, -0.003]} />
              <skinnedMesh
                name="Cube_0"
                geometry={nodes.Cube_0.geometry}
                material={playerColorMaterial}
                skeleton={nodes.Cube_0.skeleton}
              />
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/simple_character.glb");
