/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/Lightskull.glb -o src/components/Lightskull.jsx 
*/

import { useRef, useEffect, useMemo } from "react";
import { Color, MeshStandardMaterial } from "three";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

export function Lightskull({ color = "black", animation = "Run", ...props }) {
  const group = useRef();

  const { scene, materials, animations } = useGLTF("/models/Lightskull.glb");

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    actions[animation].reset().fadeIn(0.2).play();
    return () => actions[animation]?.fadeOut(0.2);
  }, [animation]);

  const playerColorMaterial = useMemo(
    () => new MeshStandardMaterial({ color: new Color(color) }),
    [color]
  );

  useEffect(() => {
    // ASSIGNING CHARACTER COLOR
    nodes.Cube.traverse((child) => {
      if (child.isMesh && child.material.name === "material") {
        child.material = playerColorMaterial;
      }
      if (child.isMesh) {
        child.castShadow = true;
        child.receiveShadow = true;
      }
    });

    clone.traverse((child) => {
      if (child.isMesh && child.material.name === "material") {
        child.material = playerColorMaterial;
      }
      if (child.isMesh) {
        child.castShadow = true;
      }
    });
  }, [nodes, clone]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <group name="Ch44">
            <skinnedMesh
              name="Mesh"
              geometry={nodes.Mesh.geometry}
              material={playerColorMaterial}
              skeleton={nodes.Mesh.skeleton}
            />
            <skinnedMesh
              name="Mesh_1"
              geometry={nodes.Mesh_1.geometry}
              material={playerColorMaterial}
              skeleton={nodes.Mesh_1.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/Lightskull.glb");
